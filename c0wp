#!/bin/bash

#################
# c0wp          #
# by 0bfxgh0st* #
#################

if [ $(id -u) != "0" ];
then
        printf "%s\n" "This program needs root privilege to run"
        exit
fi

COL_GREEN="\e[32m"
COL_YELLOW="\e[33m"
COL_FAST="\e[3;4m"
COL_END="\e[0m"

function CowSay(){
	printf "${COL_YELLOW}"
cat << 'EOF'
 ______________________
< M0x0 /proc/net/arp ! >
 ----------------------
        \   ^__^
         \  (**)\_______
            (__)\       )\/\
             U  ||----w |
                ||     ||

++++++++++++++++++++++
+ ipv4 host discover +
+ ping command based +
++++++++++++++++++++++

EOF
	printf "${COL_END}"
}

if [ -z "$1" ]
then

	CowSay
	printf "Usage:\n\n"
	printf "c0wp 10.0.2.1           single host scan\n"
	printf "c0wp 10.0.2.1-40        custom range scan (from 10.0.2.1 to 10.0.2.40)\n\n"
	printf "Last positional argument option:\n\n"
	printf -- "--fast      to faster scan\n\n"
	printf "${COL_FAST}Fast${COL_END} scan example:\n\n"
	printf "c0wp 10.0.2.1-200 --fast"
	exit

fi

function output_proc_net_arp(){

        printf -- "----------------\e[1mARP TABLE\e[0m--------------------------------------------\n"
	arp_table_output=$(grep '0x2' /proc/net/arp | sed 's/0x1//g' | sed 's/0x2//g' | sed 's/*//g' | sort)
        printf "$arp_table_output"
        printf "\n%s\n\n" "---------------------------------------------------------------------"
}

result="/tmp/c0wpscan"
rm -r "$result" 2>/dev/null

custom_range_scan="-"

timeout="0.4"
if [ "$2" == "--fast" ]
then
	timeout="0.01"
fi

# Single host scan
if [[ "$1" != *"$full_range_scan"* ]] || [[ "$1" != *"$custom_range_scan"* ]];
then
	status=$(ping -c 1 -s 1 -w 0 -W "$timeout" "$1" 2>/dev/null | grep -o ttl)
	if [ "$status" == "ttl" ]
        then
                printf "${COL_GREEN}+${COL_END} $1 <${COL_GREEN}up${COL_END}>\n" > "$result"

		printf "\n"
	        cat "$result" 2>/dev/null
       		printf "\n"
	        output_proc_net_arp
	fi

fi

# Custom range scan
if [[ "$1" == *"$custom_range_scan"* ]];
then
        counter=$(printf -- "$1" | awk -F "." '{print $4}' | awk -F "-" '{print $1}')

        total_to_scan=$(printf -- "$1" | awk -F "-" '{print $2}')

	arg_ip="$1"
        baking_ip=$(echo "${arg_ip%.*}")
        baked=$(printf -- "$baking_ip.")

	count="$counter"

	printf "Scanning $total_to_scan hosts\n"

	while [ $count -le $total_to_scan ];
        do
                printf "${COL_YELLOW}*${COL_END} Sending ping to $baked$count\n"
		status=$(ping -c 1 -s 1 -w 0 -W "$timeout" "$baked$count" 2>/dev/null | grep -o ttl)

		if [ "$status" == "ttl" ]
	        then
        	        printf "${COL_GREEN}+${COL_END} $baked$count <${COL_GREEN}up${COL_END}>\n" >> "$result"
		fi

                let count=count+1
        done

	printf "\n"
	cat "$result" 2>/dev/null
	printf "\n"
	output_proc_net_arp

fi

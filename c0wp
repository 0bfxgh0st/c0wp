#!/bin/bash

#################
# c0wp          #
# by 0bfxgh0st* #
#################

COL_RED="\e[31m"
COL_GREEN="\e[32m"
COL_YELLOW="\e[33m"
COL_FAST="\e[3;4m"
COL_END="\e[0m"

function CowSay(){

	printf "${COL_YELLOW}"
cat << 'EOF'
 ______________________
< M0x0 /proc/net/arp ! >
 ----------------------
        \   ^__^
         \  (**)\_______
            (__)\       )\/\
             U  ||----w |
                ||     ||
EOF
	printf "${COL_END}"

}

if [ -z "$1" ]
then

	CowSay
	printf "\n${COL_YELLOW}+ host discover\n"
	printf "+ ping command based${COL_END}\n\n"
	printf "Usage:\n\n"
	printf "c0wp 10.0.2.1                    single host ipv4 scan\n"
	printf "c0wp fe80::a00:27ff:fe7b:8cd7    single host ipv6 scan\n"
	printf "c0wp 10.0.2.1-40                 custom range ipv4 scan (from 10.0.2.1 to 10.0.2.40)\n\n"
	printf "Last positional argument option:\n\n"
	printf -- "--fast      to faster scan\n\n"
	printf "${COL_FAST}Fast${COL_END} scan example:\n\n"
	printf "c0wp 10.0.2.1-200 --fast"
	exit

fi

function output_proc_net_arp(){

	printf -- "> ${COL_YELLOW}ARP TABLE${COL_END}\n"
	arp_table_output=$(grep '0x2' /proc/net/arp | sed 's/0x1//g' | sed 's/0x2//g' | sed 's/*//g' | tr -s " " | sort)
	printf "$arp_table_output"
	printf "\n"

}


custom_range_scan="-"
timeout="0.4"

if [ "$2" == "--fast" ]
then
	timeout="0.01"
fi

# Single host scan
if [[ "$1" != *"$custom_range_scan"* ]];
then
	CowSay
	status=$(ping -c 1 -s 1 -w 0 -W "$timeout" "$1" | awk -F 'ttl=' '{print $2}' | cut -d ' '  -f 1 | tr -d '\n')

        if [[ -z "$status" ]]
        then
                printf "\n${COL_RED}-${COL_END} $1 <${COL_RED}down${COL_END}>\n\n"
                exit
        fi

        if (( "$status" <= 64 ));
        then
                printf "\n${COL_GREEN}+${COL_END} $1 ${COL_GREEN} Unix/Linux${COL_END} (${COL_GREEN}99%%${COL_END})\n\n"
                output_proc_net_arp
        elif (( "$status" <= 128 ));
        then
		printf "\n${COL_GREEN}+${COL_END} $1 ${COL_GREEN} Windows${COL_END} (${COL_GREEN}99%%${COL_END})\n\n"
                output_proc_net_arp
	else

		printf "\n${COL_GREEN}+${COL_END} $1 ${COL_RED}- Can't determinate OS${COL_END}\n\n"
        fi

fi

# Custom range scan
if [[ "$1" == *"$custom_range_scan"* ]];
then
	CowSay
        counter=$(printf -- "$1" | awk -F "." '{print $4}' | awk -F "-" '{print $1}')
        total_to_scan=$(printf -- "$1" | awk -F "-" '{print $2}')
        arg_ip="$1"
        baking_ip=$(echo "${arg_ip%.*}")
        baked=$(printf -- "$baking_ip.")
        count="$counter"

        printf "\nScanning $total_to_scan hosts\n"

        while [ $count -le $total_to_scan ];
        do
		status=$(ping -c 1 -s 1 -w 0 -W "$timeout" "$baked$count" | awk -F 'ttl=' '{print $2}' | cut -d ' '  -f 1 | tr -d '\n')

                if [ "$status" != "" ]
                then

			if (( "$status" <= 64 ));
        		then
	                	printf "\n${COL_GREEN}+${COL_END} $baked$count ${COL_GREEN} Unix/Linux${COL_END} (${COL_GREEN}99%%${COL_END})"
			elif (( "$status" <= 128 ));
		        then
                		printf "\n${COL_GREEN}+${COL_END} $baked$count ${COL_GREEN} Windows${COL_END} (${COL_GREEN}99%%${COL_END})"

			else

		                printf "\n${COL_GREEN}+${COL_END} $baked$count ${COL_RED}- Can't determinate OS${COL_END}"
			fi

		fi

                let count=count+1
        done

        printf "\n\n"
        output_proc_net_arp

fi
